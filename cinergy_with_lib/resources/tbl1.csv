token,label,notes,TestCode,applies to,expression
MAGIC:tsv:multipart,MAGIC tab delimited text format.,,"def testtoken_magic(dist):
    #import testurl# this function tests to see if the URL is live (returns a 200)
    #check for MagIC paleomagnetic database text file
    #print('Magic' + theappprofile + ', ' + thename)
    appprofile = dist.appprofile
    name = dist.name
    url = dist.url
    if ((appprofile.lower().find('pymag')>-1) or
       (appprofile.lower().find('magic:tsv:multipart')>-1) or
       (name.lower().find('magic multipart tab separated values')>-1 )):
        if testurl(url):
            return {""MAGIC:tsv:multipart"": {""url"":url, ""name"": name}}
        else:
            return {}
    else:
        return {}","Software, Data Distribution",testtoken_magic(dist)
OWL-v2-rdf/xml,,"Protege will open owl or rdf files encoded in N3, Turtle, rdf/XML, ",,"ontology, data distribution",
NWIS-rdb,NWIS tsv,Generic NWIS rdb file,"def testtoken_nwis_rdb(dist):
    #import testurl # this function tests to see if the URL is live (returns a 200)
    # nwis rdb data
    url = dist.url
    name = dist.name
    
    if ((url.lower().find('/nwis/qwdata')>-1 )
        or (url.lower().find('/nwis/gwlevels')>-1 )
        or (url.lower().find('/nwis/uv')>-1 )
        or (url.lower().find('/nwis/peak')>-1 )
        or (url.lower().find('/nwis/measurements')>-1)):
    # NWIS time series in rdb text file format
        if testurl(url):
            return {""NWIS-rdb"": {""url"":url, ""name"": name}}
        else:
            return {}
    else:
        return {}","Software, Data Distribution",testtoken_nwis_rdb(dist)
NWIS-rdb-uv,NWIS current data,"Standard rdb text document with current data. For now, we don't have apps specific to the NWIS-rdb subtypes, so this is just an example",,"Software, Data Distribution",
wfsclient,generic OGC wfs,"general profile for any OGC WFS 1.0.0, 1.1.0 or 2.0","def testtoken_wfs(dist):
    #import testurl as testurl  # this function tests to see if the URL is live (returns a 200)
    #check for OGC WFS Web feature service
    url = dist.url
    protocol = dist.protocol
    name = dist.name
    if (protocol.lower().find('wfs')>-1 or
       url.lower().find('service=wfs')>-1):       
        # append to dispatchlist
        # wfs disptacher gets the base URL for the service
        #check if service is responding
        tryurl=url.split('?')[0] + '?service=wfs&request=getCapabilities'
        if testurl(tryurl):
            return{""wfsclient"": {""url"":url.split('?')[0], ""name"":name}}
        else:
            return {}
    else:
        return {}     ","Software, API, Data Distribution",testtoken_wfs(dist)
NDBC-tsv,National Data Bouy Center tab delimited format,"For software, indicates that files can be opened and operated on using the software that conforms to National Data Bouy Center conventions for tab-delimited text files; for Data Distribution indicates that the distribution format conforms to that specification","def testtoken_tsv(dist):
    #import testurl # this function tests to see if the URL is live (returns a 200)
    url = dist.url
    name = dist.name
    if (url.lower().find('www.ndbc.noaa.gov/view_text_file.php')>-1 ):
        if testurl(url):
            return {""NDBC-tsv"": {""url"":url, 'name': name}}
        else:
            return {}
    else:
        return {}
                         
","Software, Data Distribution",testtoken_tsv(dist)
kmlclient2.3,ConformsTo kml or kmz v2.3,"For software, indicates that files in KML or KMZ format can be opened and operated on using the software; for Data Distribution indicates that the distribution format conforms to the KML v2.3 specification",,"Software, Data Distribution",
wmsclient,Implements OGC WMS,"This token is used to indicate a client application (software), a service instance, or a data distribution that will interact using any of the OGC WMS specifications (1.0, 1.1, 1.1.1, 1.3.0); use a versioned token if the client or service is specific to a particular WMS version","def testtoken_wms(dist):
    protocol = dist.protocol
    url = dist.url
    if (protocol.lower().find('wms')>-1 or
       url.lower().find('service=wms')>-1):       
        # append to dispatchlist
        # wms disptacher gets the base URL for the service
        #check if service is responding
        base_url = url.split('?')[0]
        tryurl= base_url + '?service=wms&request=getCapabilities'
        if testurl(tryurl):
            return{'token':'wmsclient','url':base_url}
        else:
            return {}
    else:
        return {}","Software, API, data distribution",
wmsclient1.1.1,Implements OGC v1.1.1 WMS only,"This token is used to indicate a client application (software), a service instance, or a data distribution that will interact using  the OGC WMS specifications version 1.1.1",,"Software, API, data distribution",
wmsclient1.3.0,Implements OGC v1.3.0 WMS only,"This token is used to indicate a client application (software), a service instance, or a data distribution that will interact using  the OGC WMS specifications version 1.3.0",,"Software, API, data distribution",